Merhaba herkese, bugün Kendini Koruma birimindeki yazılım geliştirme süreçlerinde faydalanmaya çalıştığımız CI/CD süreçleriyle alakalı bir sunum gerçekleştireceğiz.

Sunum ilk olarak CI/CD nedir? Avantajları nelerdir? İşimizi nasıl hızlandırabilir gibi soruların değerlendireleceği kısa bir giriş kısmıyla başlayacak. 
Sonrasında her projemizdeki pipeline basamaklarından olan build ve publish stagelerden bahsedeceğiz. 
Yine CI/CD altyapısı kazandırılan bütün projelerde yer alan statik analiz ve unit test stagelerinden bahsedeceğiz. 
Statik analiz ve unit test aşamaları gerçekleştirilirken kullandığımız araçlardan ve bu stagelerin çıktılarından söz edeceğiz. 
Daha sonra proof of concept olarak gerçeklenen pipeline temelli bir test otomasyon uygulamasından bahsedeceğiz. 
En sonunda şu anda hali hazırda CI/CD süreçlerinde kullanmadığımız ama kullanmamız durumunda bu süreçleri daha iyi bir hale getirebilme potansiyeli olan Downstream Pipelines konseptinden bahsedeceğiz.

CI/CD, yazılım geliştirme süreçlerinde sürekli tekrar eden building, testing, deploying gibi aşamaları otomatikleştirmek ve belirli bir düzene koymak için uygulan yöntemlere verilen ad.

CI, birden fazla geliştiricinin kod değişikliklerinin düzenli olarak ortak bir codebase'e entegre edilmesini içerir. 
Her değişiklikte/committe, kodun derlenmesi, testlerin yürütülmesi ve artifactlerin oluşturulması gibi aşamaların otomatik olarak gerçekleştirildiği ve tekrarlı şekilde uygulandığı süreçtir. 
Amaç, entegrasyon hatalarını erken tespit etmek ve kod tabanının istikrarlı ve işlevsel kalmasını sağlamaktır.

CD ise CI sürecinde elde edilen artifactlerin ürün hattına taşınmasını kapsıyor. 
Continious Delivery ve Continious Deployment arasındaki fark da şu: Eğer ürün hattına çıkması muhtemel çıktıların hatta çıkarılıp çıkarılmayacağına manuel olarak karar veriliyorsa yani bu karar kullanıcıya bırakılıyorsa bu continious delivery, yok eğer bu da otomatik bir şekilde hatta çıkarılıyorsa bu da continious deployment oluyormuş. 

CI/CD süreçleri bir programcının hayatını nasıl etkiliyor ne gibi faydalar sunuyor?:
Otomasyon: CI/CD, tekrarlanan görevleri otomatikleştirerek insan hatasını azaltır. Programcılar bu süreçleri manuel yönetmek yerine kod yazmaya odaklanabilir, böylece daha hızlı ve daha güvenilir sürümler elde edilebilir.
Hızlı Geri Bildirim: CI/CD, her entegrasyondan sonra otomatik testleri vs. çalıştırarak kod değişiklikleri hakkında hızlı geri bildirim sağlar. Bu da, geliştiricilerin sorunları geliştirme döngüsünün başlarında tespit edip düzeltmelerine yardımcı olarak daha yüksek kaliteli yazılım ve daha hızlı teslimat sağlar.
Sürekli İyileştirme: CI/CD, daha sık, küçük kod değişikliklerini ve otomatik testleri teşvik ederek sürekli iyileştirme kültürünü teşvik eder.
Riskin Azaltılması: CI/CD, test ve dağıtım süreçlerini otomatikleştirirken değişikliklerin devreye alınmadan önce kontrollü bir ortamda kapsamlı bir şekilde test edilmesine olanak tanıdığı için olası risklerin azaltılmasına yardımcı olur.
Özetle, CI/CD yazılım geliştirme süreçlerini otomatikleştirerek programcının hızlı feedback almasını, zamandan tasarruf etmesini, kendi işine odaklanmasını ve hızlı ve çok sayıda sürüm çıkarmasını kolaylaştırır.

Build stage'inde derleme yapıyoruz. Zannediyorum her projemizde kullandığımız cmake_builder.bat dosyamız var. Bu camke_builder.bat'ın içerisinde derleme yapılmasını istediğimiz tüm konfigürasyonları veriyoruz. Ve burada belirttiğimiz konfigürasyonlara göre kodda yaptığımız bir değişiklikten sonra, kod derleniyor ve her konfigürasyon için çıktı kütüphaneler ve bu derleme sırasında kullanılan include'lar daha sonradan erişilebilecek tek bir artifactte toplanılıyor ve stage tamamlandıktan sonra bu artifact indirilebilir olarak hazır hale getiriliyor. 

Publish stage'i de şöyle: Bizim Gitlabımızda bir package registry bölümü var. Bu package registry de biz daha önceden derleyip kullanıma hazır hale getirdiğimiz paketlerimizi versiyonlaruyla birlikte tutuyoruz.
Herhangi birimiz, bir proje üstünde çalışırken de ihtiyaç duyması halinde bu paketleri buradan çekerek kullanıyor. Biz package registry'deki bir paket üzerinde değişiklik yaptığımızda da buradaki paketin güncel tutulmasını istiyoruz. 
Çünkü başka bir iş üzerinde çalışan kişi bizim yaptığımız değişiklikten habersiz çalıştığında tutarsızlığa sebep olunmuş oluyor. Bu tutarsızlıklarla karşılaşmamak için biz de codebase'i olabildiğince güncel tutmaya çalışıyoruz.
Publis stage'inin yaptığı iş temelde bu: paketleri herkes için güncel tutmaya yarıyor. 
Biz herhangi bir pipeline'ı çalıştırdığımızda yaptığımız değişikliklerle birlikte build stage'i tamamlandığında oluşan paketi gitlabtaki package registry'e aktararak paketin en güncel halini herkesin kullanabilmesini sağlıyor.


Statik analiz, programı çalıştırmaya gerek kalmadan kaynak kodunun otomatik olarak incelenmesiyle yapılan bir hata ayıklama yöntemidir. 
Bu, geliştiricilerin çalıştırdıkları projede hata oluşturabilecek potansiyel durumları tespit edebilmelerine ve daha güvenli kod yazmalarına olanak verir. 
Biz de kendi pipeline'larımıza statik analiz stage'ini ekleyerek yazdığımız kodda yapılabilecek muhtemel iyileştirmeleri görebilmeyi istedik. 
Bunu yaparken de cppecheck, cppcheck-html report ve sonarqube'den faydalandık. 

Cppcheck C/C++ dilleri için geliştirilmiş bir statik kod analiz aracı. Kendi içinde belirli tanımlanmış rule'ları var ve yazdığımız kodda bu kurallara ne kadar uyulduğunu kontrol ediyor. 

Cppcheck-HTMLReport cppcheck analiz sonucunu görselleştirilmesi için kullandığımız bir python scripti. Bu scripti de yine cppcheck'in github reposundan hazır olarak bulduk ve kullandık. Cppcheck'in analiz sonucu olarak çıkarttığı XML formatındaki raporu parametre olarak kendisine verdiğimizde bize bize html çıktısı sunuyor. Browser üzerinden biz analiz sonuçlarımızı görüp çeşitli filtrelendirmelere tabi tutabiliyoruz.

Sonarqube şu an zannediyorum tüm aselsan genelinde de kullanılan bir test analiz aracı. Üzerinde çalışılan kaynak kodların kalitesini değerlendirmek ve iyileştirmek için kullanılıyor. Aslında sonarqube kendisi de statik analiz yapabilen bir araç ama hali hazırda C/C++ üzerinde kullanabilmek için ücretsiz bir seçenek sunmuyor. Ücretli bir seçeneği varmış. Sonarla yaptığımız analizlerde de o yüzden security hotspot olarak geçen güvenlik açıkları gösterilmiyor. Yine de biz neredeyse bütün projelerimizi sonarqube'e aktardık ve orada bütün projelerin analiz sonuçları görülebilir. Ben de göstermiş olayım. 
Statik analiz stage'inin artifactlerine ki bunlar xml formatında cppcheck sonucu, html reportla bu raporun görselleştirilmiş hali ve sonarqube'un kendi çıkardığı analiz raporlarına da pipelinelar üzerinden ulaşabiliyoruz. 

Unit test, üzerinde çalışılan programda programı oluşturan fonksiyon gibi küçük birimlerin doğru çalışıp çalışmadığını, izole olarak test etmeye verilen isim. Unit test, geliştiricinin arkasındaki teorik mantığa göre belirli bir kod bloğunun beklendiği gibi çalışıp çalışmadığını kontrol etmek için tasarlanmıştır. Biz de yapılan her değişiklikten sonra sürekli olarak güncel kodun doğru çalışıp çalışmadığını görebilmek adına Unit Test'i pipelinelara entegre edilebileceğini gstermek istedik. Çeşitli unit testing araçlarının içinde de Google Test'i tercih ettik.

Çünkü gitlabla uyumlu çalışabiliyor. Arkasında google desteği var. Geniş bir community tarafından kullanılıyor. Çeşitli işletim sistemlerinde cross paltform olarak çalışabiliyor. 

Unit test coverage, unit test sırasında test edilen kodun ne kadarının üzerinden geçildiğinin ölçüsü. Yazdığımız birim testlerin kodumuzun ne kadarını kapsadığını bize söylüyor.
Biz de unit testle birlikte code coverage'ın da pipeline üzerinden değerlendirilmesini ve görülebilir olmasını istediğimiz için code coverage da pipeline'lara eklemeye çalıştık. Bunun için de gcov'dan faydalandık. 
Gcov hali hazırda gcc ile birlikte gelen bir executable. mingw'nin bin klasöründe gcc.exe ya da g++.exe ile beraber bir de gcov.exe var. bu executable sayesinde code coverage değerlendirilmesi yapılabiliyor. Derlerken ve unit test sonucu çıkan executable'ı çalıştırırken belirli flagleri kullanarak code coverage yaptırıyoruz. Bu aşamalarda verdiğimiz flaglerden sonra çeşitli artifact dosylar oluşuyor. Bu dosyaların olduğu dizinde gcov'u çalıştırdığımızda bize html raporları oluşturuyor. 
 
ATA Test Otomasyonu başlangıçta da belirttiğimiz gibi pipeline temelli bir test otomasyon uygulaması. Biz bu çalışmayla ata arayüzünden oluşturulan bir test senaryosunın pipeline çalıştığından otomatik olarak test edilebilirliğini göstermeyi istedik. 
Bu çalışmada bizim L2 katmanında TCP ile 1 mesaj alıp 1 mesaj gönderen basit bir projemiz var. ATA arayüzünden de bu projeyi oluşturup bir test aracı çıkartıyoruz. Test aracı için bir senaryo oluşturuyouz. Örnek olarak bizim gönderdiğimiz bir mesajın karşı tarafa doğru parametrelerle ulaşıp ulaşmadığını kontrol etmek istiyoruz diyelim. Senaryoda gönderdiğimiz mesajın tüm bitgrouplarını beklediğimiz değerlerle dolduruyoruz. 
Pipeline çalıştırıldığında bu paket için bir test executable'ı oluşturuluyor. Oluşturduğumuz exeyi pipeline üzerinden bir terminalde çalıştırıyruz. Test aracını da başka bir terminalde çalıştırıyoruz. Test aracının bizden input beklememesi ve senaryoyu sırasıyla baştan sona çalıştırmamız için birkaç parametre veriyoruz. (--no-gui --auto --cikti --senaryo-dosyasi)
Test aracı senaryouyu tamamladığında senaryo sonucunu parametre olarak verdiğimiz bir klasöre çıkartıyor. Pipeline üzerinden de senaryoya uygulanan test sonucu artifact olarak alınabiliyor.  
Böylelikle bir test senaryosunun pipeline çalıştığında otomatik olarak test edilebilirliğini göstermiş oluyoruz.


Downstream pipelines: Başka bir pipeline tarafından tetiklenen pipelinelara downstream pipeline deniyor. Downstream pipelinelar kendilerini tetikleyen pipelinedan bağımsız ve eş zamanlı olarak çalıştırılıyorlar. Downstream Pipelinelar ikiye ayrılıyor:
Parent-Child Pipelines: Downstream pipelinelar ile bu pipelineları tetikleyen pipeline aynı proje içerisinde yer alıyorsa bu downstream pipelinelara parent-child pipelinelar deniliyor.
Multiproject Pipelines: Downstream pipelinelar ile bu pipelineları tetikleyen pipeline farklı proje içerisinde yer alıyorsa bu downstream pipelinelara multiproject pipelinelar deniliyor. 

Modularization: Pipelinelarımızı daha küçük ve daha spesifik amaçlara yönelik bileşenlere ayırmamızı sağladıkları için daha modüler bir yaklaşım sunmalarını bekleriz. Yaml dosyamızın şişmesini önler.
Reusability: Eğer spesifik amaca yönelik bir child pipeline birden fazla yerde kullanılması gerekirse daha önceden yazdığımız yaml dosyamızı işaret ederek tekrar tekrar bu pipeline'ı çalıştrıabiliriz. Tekrar kullanılabilirlik sunar.
Isolation: Birbirinden bağımsız katmanlar için ayrı ayrı pipelinelar işletebilmemizi sağlar. Değişiklik yapmadığımız halde tekrar çalıştırılarak pipeline'a yük bindirin aşamalardan bizi kurtarabilir.